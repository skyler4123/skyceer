docker_interview:
  basics:
    - question: What is Docker?
      answer: Docker is an open-source platform that allows developers to automate the deployment of applications inside lightweight, portable containers.

    - question: What is a Docker container?
      answer: A Docker container is a lightweight, standalone, and executable package that includes everything needed to run an application, such as code, runtime, libraries, and dependencies.

    - question: What is the difference between a Docker image and a Docker container?
      answer: 
        - A Docker image is a read-only template used to create containers.
        - A Docker container is a running instance of a Docker image.

    - question: What are the main components of Docker?
      answer: The main components of Docker are:
        - Docker Engine
        - Docker Images
        - Docker Containers
        - Docker Hub
        - Docker Compose

    - question: What is Docker Hub?
      answer: Docker Hub is a cloud-based registry service where Docker users can store, share, and manage Docker images.

  commands:
    - question: How do you list all running Docker containers?
      answer: Use the command `docker ps` to list all running containers.

    - question: How do you list all Docker containers, including stopped ones?
      answer: Use the command `docker ps -a` to list all containers, including stopped ones.

    - question: How do you build a Docker image?
      answer: Use the command `docker build -t <image_name> .` to build a Docker image from a Dockerfile.

    - question: How do you run a Docker container?
      answer: Use the command `docker run <image_name>` to create and start a container from an image.

    - question: How do you stop a running Docker container?
      answer: Use the command `docker stop <container_id>` to stop a running container.

    - question: How do you remove a Docker container?
      answer: Use the command `docker rm <container_id>` to remove a container.

    - question: How do you remove a Docker image?
      answer: Use the command `docker rmi <image_id>` to remove an image.

  dockerfile:
    - question: What is a Dockerfile?
      answer: A Dockerfile is a text file that contains instructions to build a Docker image.

    - question: What are some common instructions in a Dockerfile?
      answer: Common instructions in a Dockerfile include:
        - `FROM`: Specifies the base image.
        - `RUN`: Executes a command during the build process.
        - `COPY`: Copies files from the host to the image.
        - `CMD`: Specifies the default command to run when a container starts.
        - `EXPOSE`: Exposes a port for the container.

    - question: What is the difference between `CMD` and `ENTRYPOINT` in a Dockerfile?
      answer: 
        - `CMD` provides default arguments for the container and can be overridden.
        - `ENTRYPOINT` specifies the main command to run and is not easily overridden.

    - question: How do you optimize a Dockerfile?
      answer: To optimize a Dockerfile:
        - Use a minimal base image.
        - Combine multiple `RUN` instructions into one.
        - Use `.dockerignore` to exclude unnecessary files.
        - Leverage multi-stage builds.

  networking:
    - question: What is Docker networking?
      answer: Docker networking allows containers to communicate with each other and with the host system.

    - question: What are the different types of Docker networks?
      answer: Docker provides the following network types:
        - `bridge`: Default network for containers on a single host.
        - `host`: Shares the host's network namespace.
        - `none`: Disables networking for the container.
        - `overlay`: Enables communication between containers across multiple hosts.
        - `macvlan`: Assigns a MAC address to the container for direct network access.

    - question: How do you connect a container to a specific network?
      answer: Use the command `docker network connect <network_name> <container_name>` to connect a container to a specific network.

  volumes_and_storage:
    - question: What is a Docker volume?
      answer: A Docker volume is a mechanism for persisting data generated by and used by Docker containers.

    - question: How do you create a Docker volume?
      answer: Use the command `docker volume create <volume_name>` to create a volume.

    - question: How do you mount a volume to a container?
      answer: Use the `-v` flag with the `docker run` command, e.g., `docker run -v <volume_name>:/path/in/container <image_name>`.

    - question: What is the difference between a bind mount and a volume in Docker?
      answer: 
        - A bind mount maps a specific directory on the host to a container.
        - A volume is managed by Docker and is more portable and secure.

  orchestration:
    - question: What is Docker Compose?
      answer: Docker Compose is a tool for defining and running multi-container Docker applications using a `docker-compose.yml` file.

    - question: How do you start a Docker Compose application?
      answer: Use the command `docker-compose up` to start the application.

    - question: What is the difference between Docker and Kubernetes?
      answer: 
        - Docker is a containerization platform for building and running containers.
        - Kubernetes is a container orchestration platform for managing and scaling containerized applications.

    - question: What is a Docker Swarm?
      answer: Docker Swarm is Docker's native clustering and orchestration tool for managing a group of Docker nodes.

  advanced:
    - question: What is the difference between an image layer and a container layer?
      answer: 
        - An image layer is a read-only layer that forms part of a Docker image.
        - A container layer is a writable layer added on top of the image layers when a container is created.

    - question: What is the purpose of `.dockerignore`?
      answer: The `.dockerignore` file is used to specify files and directories to exclude from the Docker build context, reducing the image size.

    - question: How do you troubleshoot a Docker container?
      answer: To troubleshoot a Docker container:
        - Use `docker logs <container_id>` to view logs.
        - Use `docker exec -it <container_id> /bin/bash` to access the container's shell.
        - Use `docker inspect <container_id>` to view detailed information about the container.

    - question: What is multi-stage building in Docker?
      answer: Multi-stage building is a technique in Docker that allows you to use multiple `FROM` statements in a Dockerfile to create smaller and more efficient images.

    - question: How do you secure a Docker container?
      answer: To secure a Docker container:
        - Use minimal base images.
        - Run containers as non-root users.
        - Use Docker Content Trust (DCT) to verify image signatures.
        - Limit container privileges using `--cap-drop` and `--cap-add`.