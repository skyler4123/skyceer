<div class="w-full">
  <% if notice.present? %>
    <p class="py-2 px-3 bg-green-50 mb-5 text-green-500 font-medium rounded-lg inline-block" id="notice"><%= notice %></p>
  <% end %>

  <div class="flex justify-between items-center">
    <h1 class="font-bold text-4xl">Components</h1>
  </div>

  <div id="components" class="flex flex-col justify-center items-center min-w-full pb-4">


    <% copy_link_event_id = SecureRandom.uuid %>
    <%= button(is_test: true, event: { id: copy_link_event_id, listener: :click, action: :copy_link }) %>
    <%= render(LinkComponent.new(label: "Test Copy Link", url: '/#', is_test: true, event: { id: copy_link_event_id })) %>

    <% accordion_event_id = SecureRandom.uuid %>
    <%= button(event: { id: accordion_event_id, listener: :click, action: :toggle }) %>
    <%= render(AccordionComponent.new(is_test: true, orientation: :horizontal, event: { id: accordion_event_id })) do %>
      <div>kjhjk lkjlkj kjlkj kjlk </div>
    <% end %>

    <% carousel_event_id = SecureRandom.uuid %>
    <%= button(is_test: true, event: { id: carousel_event_id, listener: :click, action: :scrollForward }) %>
    <%= render(CarouselComponent.new(is_test: true, event: { id: carousel_event_id })) do %>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full object-cover" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-1.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-2.jpg" alt="">
      </div>

      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-3.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-4.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-5.jpg" alt="">
      </div>

      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-6.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-7.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-8.jpg" alt="">
      </div>

      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-9.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-10.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-11.jpg" alt="">
      </div>
    <% end %>

    <% icon_event_id = SecureRandom.uuid %>
    <%= button(is_test: true, event: { id: icon_event_id, listener: :click, action: :rotate }) %>
    <%= render(IconComponent.new(is_test: true, event: { id: icon_event_id }, svg_class: "w-10 h-10 open:rotate-180 duration-1000 ease-out")) %>
    <%= render(IconComponent.new(is_test: true, type: :logo, name: :github, event: { id: icon_event_id }, svg_class: "w-10 h-10 open:rotate-180 duration-1000 ease-out")) %>

    <% img_event_id = SecureRandom.uuid %>
    <%= button(is_test: true, event: { id: img_event_id, listener: :click, action: :rotate }) %>
    <%= render(ImgComponent.new(is_test: true, event: { id: img_event_id }, img_class: "w-40 h-40 open:animate-spin", url: "https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image.jpg")) %>

    <%= render(ListComponent.new(is_test: true, is_sortable: true)) do %>
      <li>Coffee</li>
      <li>Tea</li>
      <li>Milk</li>
    <% end %>

    <% modal_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(label: 'Test Modal', event: { id: modal_event_id, action: :open, listener: :click })) %>
    <%= render(ModalComponent.new(event: { id: modal_event_id })) do %>
      <div class="">
        Executing JavaScript from a string is an BIG security risk.
        With eval(), malicious code can run inside your application without permission.
        With eval(), third-party code can see the scope of your application, which can lead to possible attacks.
      </div>
    <% end %>

    <% popover_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(label: "Test Popover", klass: "relative", event: { action: :toggle, listener: :click, id: popover_event_id })) do |c| %>
      <% c.with_append do %>
        <%= render(PopoverComponent.new(is_test: true, position: :right_center, event: { id: popover_event_id })) do %>
          <div class="animate-fade-in">hkj o;o jygn sa dukh khga ag knjyf </div>
        <% end %>
      <% end %>
    <% end %>

    <% percentage_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(label: "Test Button", event: { action: :change_percentage, value: 95, listener: :click, id: percentage_event_id })) %>
    <%= render(ProgressComponent.new(is_test: true, is_show_percentage: true, percentage: 45, event: { id: percentage_event_id }, percentage_class: 'bg-green-500')) %>

    <%= render(SkeletonComponent.new()) %>

    <% tab_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(label: "Tab Next", event: { id: tab_event_id, action: :tab_next, listener: :click })) %>
    <%= render(ButtonComponent.new(label: "Tab Back", event: { id: tab_event_id, action: :tab_back, listener: :click })) %>
    <%= render(ButtonComponent.new(label: "Tab to 4rd Item", event: { id: tab_event_id, action: :tab, value: 4, listener: :click })) %>
    <%= render(ButtonComponent.new(event: { id: tab_event_id, action: :tab_next, listener: :click })) do %>
      <%= render(TabComponent.new(is_test: true, event: { id: tab_event_id })) do |c| %>
        <%= render(IconComponent.new(name: "link")) %>
        <%= render(IconComponent.new(name: "check-circle", svg_class: "w-5 h-6 text-green-500")) %>
        <%= render(IconComponent.new(name: "spinner", type: :animation)) %>
        <%= render(IconComponent.new(name: "star", svg_class: "w-5 h-6 text-sky-800")) %>
        <%= render(IconComponent.new(name: "sun", svg_class: "w-5 h-6 text-yellow-500")) %>
      <% end %>
    <% end %>

    <% text_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(event: { id: text_event_id, listener: :dblclick, action: :open_editor })) do %>
      <%= render(TextComponent.new(label: "Price", is_test: true, event: { id: text_event_id })) do |c| %>
        <% c.with_editor do %>
          <%= render(InputComponent.new) %>
        <% end %>
      <% end %>
    <% end %>

    <% toast_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(label: 'Toggle Toast', event: { id: toast_event_id, action: :toggle, listener: :click })) %>
    <%= render(ToastComponent.new(event: { id: toast_event_id }, position: :bottom)) do %>
      <div>Executing JavaScript from a string is an BIG security risk.
        With eval(), malicious code can run inside your application without permission.
        With eval(), third-party code can see the scope of your application, which can lead to possible attacks.
      </div>
    <% end %>

    <%= render(VideoComponent.new) %>

























































































    <%= render(Hr::DefaultComponent.new(label: 'Button Component')) %>
    <%= render(ButtonComponent.new(label: "Normal Button with Dispatch", event: { id: "unique random", listener: :click, action: :toggle })) %>
    <%= render(ButtonComponent.new(label: "Normal Button with Dispatch", event: { id: "unique random", listener: :click, action: :toggle }, is_open: false)) %>

    <%= render(Hr::DefaultComponent.new(label: 'Icon Component')) %>
    <% icon_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(event: { id: icon_event_id, listener: :click, action: :toggle })) %>
    <%= render(IconComponent.new(event: { id: icon_event_id })) %>
    <%= render(IconComponent.new(type: :animation, name: :spinner, event: { id: icon_event_id })) %>
    <%= render(IconComponent.new(type: :logo, name: :github, event: { id: icon_event_id })) %>
    <%= render(IconComponent.new(type: :outline, name: "code-bracket", event: { id: icon_event_id })) %>
    <%= render(IconComponent.new(type: :solid, name: "code-bracket", event: { id: icon_event_id })) %>
    <%= render(IconComponent.new(type: :mini, name: "code-bracket", event: { id: icon_event_id })) %>
    <%= render(IconComponent.new(type: :micro, name: "code-bracket", event: { id: icon_event_id })) %>


    <%= render(Hr::DefaultComponent.new(label: 'Accordion Component')) %>
    <% accordion_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(event: { id: accordion_event_id, listener: :click, action: :toggle })) %>
    <%= render(AccordionComponent.new(event: { id: accordion_event_id })) do %>
      <div>Test Toggle Component</div>
    <% end %>
    <%= render(AccordionComponent.new(event: { id: accordion_event_id }, accordion_direction: :horizontal)) do %>
      <div>Test Toggle Component</div>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "Box Component")) %>
    <% box_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(label: 'Button to Show/Hide Box', event: { id: box_event_id, listener: :click, action: :toggle })) %>
    <%= render(BoxComponent.new(event: { id: box_event_id }, style: { name: :badge, border: :bordered, color: :red }, content_class: "text-white")) %>
    <%= render(BoxComponent.new(event: { id: box_event_id }, style: { name: :badge, border: :pill, color: :green })) %>
    <%= render(BoxComponent.new(event: { id: box_event_id }, style: { name: :badge, border: :none, color: :yellow })) %>
    <%= render(BoxComponent.new(event: { id: box_event_id }, style: { name: :alert, border: :bordered, color: :red }, klass: 'relative')) do %>
      <div>Box with a small-box</div>
      <div>Box with a small-box</div>
      <div>Box with a small-box</div>
      <%= render(BoxComponent.new(klass: "w-4 h-4 bg-green-600 rounded-full animate-ping", position: :top_right)) { '' } %>
    <% end %>
    <%= render(BoxComponent.new(event: { id: box_event_id }, style: { name: :alert, border: :none, color: :yellow })) %>

    <%= render(Hr::TextComponent.new(label: "Button Component With Copy Text and Link")) %>
    <% copy_link_text_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(label: "Target Link", url: '#copy_link_success', event: { id: copy_link_text_event_id })) %>
    <%= render(ButtonComponent.new(label: 'Press To Copy Link', event: { id: copy_link_text_event_id, listener: :click, action: :copy_link })) %>
    <%= render(ButtonComponent.new(label: 'Press To Copy Text', event: { id: copy_link_text_event_id, listener: :click, action: :copy_text })) %>

    <%= render(Hr::TextComponent.new(label: "Table::DemoComponent")) %>
    <%= render(Table::DemoComponent.new) %>

    <%= render(Hr::TextComponent.new(label: "Popover::DefaultComponent")) %>
    <% popover_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(klass: "relative",event: { action: :toggle, listener: :click, id: popover_event_id })) do |c| %>
      <% c.with_hidden do %>
        <%= render(PopoverComponent.new(position: :right_center, event: { id: popover_event_id })) %>
      <% end %>
    <% end %>

    <%= render(Input::ToggleComponent.new(name: :email)) %>
    <%= render(InputComponent.new(label: "Test Floating Label", is_floating_label: true)) %>
    <%= render(InputComponent.new(label: "Test Floating Label")) %>

    <% modal_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(label: 'Test Modal', event: { id: modal_event_id, action: :toggle, listener: :click })) %>
    <%= render(ModalComponent.new(event: { id: modal_event_id })) do %>
      <div>
        Executing JavaScript from a string is an BIG security risk.
        With eval(), malicious code can run inside your application without permission.
        With eval(), third-party code can see the scope of your application, which can lead to possible attacks.
      </div>
    <% end %>







    <%= render(Hr::TextComponent.new(label: "SwitchComponent")) %>
    <% switch_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(event: { listener: :click, action: :switch, id: switch_event_id })) %>
    <%= render(SwitchComponent.new(event: { id: switch_event_id })) do |c| %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "link")) %>
      <% end %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "check-circle", svg_class: "w-5 h-6 text-green-500")) %>
      <% end %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "spinner", type: :animation)) %>
      <% end %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "star", svg_class: "w-5 h-6 text-sky-800")) %>
      <% end %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "sun", svg_class: "w-5 h-6 text-yellow-500")) %>
      <% end %>
    <% end %>

    <%= render(SwitchComponent.new(event: { listener: :click, action: :switch })) do |c| %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "link")) %>
      <% end %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "check-circle", svg_class: "w-5 h-6 text-green-500")) %>
      <% end %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "spinner", type: :animation)) %>
      <% end %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "star", svg_class: "w-5 h-6 text-sky-800")) %>
      <% end %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "sun", svg_class: "w-5 h-6 text-yellow-500")) %>
      <% end %>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "TabComponent")) %>
    <% tab_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(event: { listener: :click, action: :tab, id: tab_event_id, value: 0 })) %>
    <%= render(ButtonComponent.new(event: { listener: :click, action: :tab, id: tab_event_id, value: 1 })) %>
    <%= render(ButtonComponent.new(event: { listener: :click, action: :tab, id: tab_event_id, value: 2 })) %>
    <%= render(ButtonComponent.new(event: { listener: :click, action: :tab, id: tab_event_id, value: 3 })) %>
    <%= render(TabComponent.new(event: { id: tab_event_id })) do |c| %>
      <% c.with_tab do %>
        <%= render(IconComponent.new(name: "link")) %>
      <% end %>
      <% c.with_tab do %>
        <%= render(IconComponent.new(name: "check-circle", svg_class: "w-5 h-6 text-green-500")) %>
      <% end %>
      <% c.with_tab do %>
        <%= render(IconComponent.new(name: "spinner", type: :animation)) %>
      <% end %>
      <% c.with_tab do %>
        <%= render(IconComponent.new(name: "star", svg_class: "w-5 h-6 text-sky-800")) %>
      <% end %>
      <% c.with_tab do %>
        <%= render(IconComponent.new(name: "sun", svg_class: "w-5 h-6 text-yellow-500")) %>
      <% end %>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "ToastComponent")) %>
    <% toast_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(label: 'Toggle Toast', event: { id: toast_event_id, action: :toggle, listener: :click })) %>
    <%= render(ToastComponent.new(event: { id: toast_event_id })) do %>
      <div>Executing JavaScript from a string is an BIG security risk.
        With eval(), malicious code can run inside your application without permission.
        With eval(), third-party code can see the scope of your application, which can lead to possible attacks.
      </div>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "ListComponent")) %>
    <%= render(ListComponent.new) do %>
      <li>Coffee</li>
      <li>Tea</li>
      <li>Milk</li>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "InputComponent")) %>
    <%= render(InputComponent.new(format_options: { date: true, delimiter: '-', datePattern: ['Y', 'm', 'd'] })) do |c| %>
      <% c.with_prepend do %>
        <%= render(IconComponent.new) %>
      <% end %>
      <% c.with_append do %>
        <%= render(IconComponent.new) %>
      <% end %>
    <% end %>
    <%= render(InputComponent.new(format_options: {     time: true,
        timePattern: ['h', 'm', 's'] })) do |c| %>
      <% c.with_prepend do %>
        <%= render(IconComponent.new(name: 'star')) %>
      <% end %>
      <% c.with_append do %>
        <%= render(IconComponent.new(name: 'moon')) %>
      <% end %>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "Input with CleaveJS")) %>
    <%= render(InputComponent.new(type: :text, format_options: {
      date: true,
      delimiter: '-',
      datePattern: ['Y', 'm', 'd']
    })) %>

    <%= render(Hr::TextComponent.new(label: "Input with FlatpickJS")) %>
    <%= render(InputComponent.new(type: :date, format_options: {
      mode: "range",
      dateFormat: "Y-m-d",
    })) %>

    <%= render(Hr::TextComponent.new(label: "Editor::EditorjsComponent")) %>
    <%= form_with do %>
      <%= render(Editor::EditorjsComponent.new(object_type: "User")) %>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "Chart::ApexComponent")) %>
    <%= render(Chart::ApexComponent.new(object_type: "User")) %>

    <%= render(Hr::TextComponent.new(label: "Calendar::TuiComponent")) %>
    <%= render(Calendar::TuiComponent.new(object_type: "User")) %>

    <%= render(Hr::TextComponent.new(label: "CarouselComponent")) %>
    <%= render(CarouselComponent.new) do %>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full object-cover" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-1.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-2.jpg" alt="">
      </div>

      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-3.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-4.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-5.jpg" alt="">
      </div>

      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-6.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-7.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-8.jpg" alt="">
      </div>

      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-9.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-10.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-11.jpg" alt="">
      </div>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "Button with block event")) %>
    <% accordion_with_interval_timeout_event_id = SecureRandom.uuid %>
    <div class="flex flex-row w-full">
      <%= render(ButtonComponent.new(id: '123',event: { id: accordion_with_interval_timeout_event_id, listener: :hover, action: :toggle }, button_class: "flex-col")) do %>
        <div class="flex flex-row bg-green-500">
          <%= render(IconComponent.new(type: :logo, name: :youtube)) %>
          <%= render(AccordionComponent.new(event: { id: accordion_with_interval_timeout_event_id }, accordion_direction: :horizontal, klass: "h-5", is_open: false)) do %>
            <div>Test Toggle Component</div>
          <% end %>
        </div>
        <div class="flex flex-row bg-green-500">
          <%= render(IconComponent.new(type: :logo, name: :youtube)) %>
          <%= render(AccordionComponent.new(event: { id: accordion_with_interval_timeout_event_id, timeout: 200, interval: 3 }, accordion_direction: :horizontal, klass: "h-5", is_open: false)) do %>
            <div>Test Toggle Component</div>
          <% end %>
        </div>
        <div class="flex flex-row bg-green-500">
          <%= render(IconComponent.new(type: :logo, name: :youtube)) %>
          <%= render(AccordionComponent.new(event: { id: accordion_with_interval_timeout_event_id }, accordion_direction: :horizontal, klass: "h-5", is_open: false)) do %>
            <div>Test Toggle Component</div>
          <% end %>
        </div>
      <% end %>
      <div class="bg-red-500 grow">
        <%= render(ButtonComponent.new(event: { id: accordion_with_interval_timeout_event_id, listener: :click, action: :open, block: :hover })) %>
        <%= render(ButtonComponent.new(event: { id: accordion_with_interval_timeout_event_id, listener: :click, action: :close, block: false })) %>
        <%= render(ButtonComponent.new(event: { id: accordion_with_interval_timeout_event_id, listener: :click, action: :toggle })) %>
      </div>
    </div>

    <%= render(Hr::TextComponent.new(label: "Text with editor")) %>
    <%= render(TextComponent.new(label: "text to test")) do |c| %>
      <% c.with_editor do %>
        <%= render(InputComponent.new) %>
      <% end %>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "Select Component")) %>
    <%= render(InputComponent.new(label: "text select component", type: :select)) do |c| %>
      <% c.with_option do %>
          <option selected>Choose a country</option>
          <option value="US">United States</option>
          <option value="CA">Canada</option>
          <option value="FR">France</option>
          <option value="DE">Germany</option>
      <% end %>
    <% end %>


    <%= render(ProgressComponent.new) %>
    <%= render(MockupComponent.new) %>
    <%= render(SkeletonComponent.new) %>




    <form>
      <label for="fname">First name:</label><br>
      <input type="text" id="fname" name="fname"><br>
      <label for="lname">Last name:</label><br>
      <input type="text" id="lname" name="lname">
      <%= render(InputComponent.new(name: 'skyler_name', event: { id: 'remember_me', listener: :input, action: :remember })) %>
    </form>

    <%= render(Form::RememberMeComponent.new) %>

<%= render(ButtonComponent.new(
  controller: 'controller-2',
  variant: :primary,
  actions: 'action->controller#method',
  events: [
    { id: '123', listener: :click, action: :toggle },
    { id: '456', listener: :hover, action: :open, prevent_default: true, stop_propagation: true }],
  is_test: true
)) do |c| %>
  <% c.with_prepend do %>
    <%= render(IconComponent.new(name: :moon)) %>
  <% end %>

  <% c.with_body do %>
    <%= render(IconComponent.new) %>
  <% end %>

  <% c.with_append do %>
    <%= render(IconComponent.new(name: :sun)) %>
  <% end %>
<% end %>




  </div>
</div>
