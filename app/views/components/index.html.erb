<div class="w-full">
  <% if notice.present? %>
    <p class="py-2 px-3 bg-green-50 mb-5 text-green-500 font-medium rounded-lg inline-block" id="notice"><%= notice %></p>
  <% end %>

  <div class="flex justify-between items-center">
    <h1 class="font-bold text-4xl">Components</h1>
  </div>

  <div id="components" class="flex flex-col justify-center items-center min-w-full pb-4">

    <%= render(Hr::DefaultComponent.new(label: 'Button Component')) %>
    <%= render(ButtonComponent.new(label: "Normal Button with Dispatch", event: { id: "unique random", listener: :click, action: :toggle })) %>
    <%= render(ButtonComponent.new(label: "Normal Button with Dispatch", event: { id: "unique random", listener: :click, action: :toggle }, is_open: false)) %>

    <%= render(Hr::DefaultComponent.new(label: 'Icon Component')) %>
    <% icon_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(event: { id: icon_event_id, listener: :click, action: :toggle })) %>
    <%= render(IconComponent.new(event: { id: icon_event_id })) %>
    <%= render(IconComponent.new(type: :animation, name: :spinner, event: { id: icon_event_id })) %>
    <%= render(IconComponent.new(type: :logo, name: :github, event: { id: icon_event_id })) %>
    <%= render(IconComponent.new(type: :outline, name: "code-bracket", event: { id: icon_event_id })) %>
    <%= render(IconComponent.new(type: :solid, name: "code-bracket", event: { id: icon_event_id })) %>
    <%= render(IconComponent.new(type: :mini, name: "code-bracket", event: { id: icon_event_id })) %>
    <%= render(IconComponent.new(type: :micro, name: "code-bracket", event: { id: icon_event_id })) %>


    <%= render(Hr::DefaultComponent.new(label: 'Accordion Component')) %>
    <% accordion_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(event: { id: accordion_event_id, listener: :click, action: :toggle })) %>
    <%= render(AccordionComponent.new(event: { id: accordion_event_id })) do %>
      <div>Test Toggle Component</div>
    <% end %>
    <%= render(AccordionComponent.new(event: { id: accordion_event_id }, accordion_direction: :horizontal)) do %>
      <div>Test Toggle Component</div>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "Box Component")) %>
    <% box_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(label: 'Button to Show/Hide Box', event: { id: box_event_id, listener: :click, action: :toggle })) %>
    <%= render(BoxComponent.new(event: { id: box_event_id }, style: { name: :badge, border: :bordered, color: :red }, content_class: "text-white")) %>
    <%= render(BoxComponent.new(event: { id: box_event_id }, style: { name: :badge, border: :pill, color: :green })) %>
    <%= render(BoxComponent.new(event: { id: box_event_id }, style: { name: :badge, border: :none, color: :yellow })) %>
    <%= render(BoxComponent.new(event: { id: box_event_id }, style: { name: :alert, border: :bordered, color: :red }, klass: 'relative')) do %>
      <div>Box with a small-box</div>
      <div>Box with a small-box</div>
      <div>Box with a small-box</div>
      <%= render(BoxComponent.new(klass: "w-4 h-4 bg-green-600 rounded-full", position: :top_right)) { '' } %>
    <% end %>
    <%= render(BoxComponent.new(event: { id: box_event_id }, style: { name: :alert, border: :none, color: :yellow })) %>

    <%= render(Hr::TextComponent.new(label: "Button Component With Copy Text and Link")) %>
    <% copy_link_text_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(label: "Target Link", url: '#copy_link_success', event: { id: copy_link_text_event_id })) %>
    <%= render(ButtonComponent.new(label: 'Press To Copy Link', event: { id: copy_link_text_event_id, listener: :click, action: :copy_link })) %>
    <%= render(ButtonComponent.new(label: 'Press To Copy Text', event: { id: copy_link_text_event_id, listener: :click, action: :copy_text })) %>

    <%= render(Hr::TextComponent.new(label: "Table::DemoComponent")) %>
    <%= render(Table::DemoComponent.new) %>

    <%= render(Hr::TextComponent.new(label: "Popover::DefaultComponent")) %>
    <% popover_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(klass: "relative",event: { action: :toggle, listener: :click, id: popover_event_id })) do |c| %>
      <% c.with_hidden do %>
        <%= render(PopoverComponent.new(position: :right_center, event: { id: popover_event_id })) %>
      <% end %>
    <% end %>

    <%= render(Input::ToggleComponent.new(name: :email)) %>
    <%= render(InputComponent.new(label: "Test Floating Label", is_floating_label: true)) %>
    <%= render(InputComponent.new(label: "Test Floating Label")) %>

    <% modal_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(label: 'Test Modal', event: { id: modal_event_id, action: :toggle, listener: :click })) %>
    <%= render(ModalComponent.new(event: { id: modal_event_id })) do %>
      <div>
        Executing JavaScript from a string is an BIG security risk.
        With eval(), malicious code can run inside your application without permission.
        With eval(), third-party code can see the scope of your application, which can lead to possible attacks.
      </div>
    <% end %>







    <%= render(Hr::TextComponent.new(label: "SwitchComponent")) %>
    <% switch_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(event: { listener: :click, action: :switch, id: switch_event_id })) %>
    <%= render(SwitchComponent.new(event: { id: switch_event_id })) do |c| %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "link")) %>
      <% end %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "check-circle", svg_class: "w-5 h-6 text-green-500")) %>
      <% end %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "spinner", type: :animation)) %>
      <% end %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "star", svg_class: "w-5 h-6 text-sky-800")) %>
      <% end %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "sun", svg_class: "w-5 h-6 text-yellow-500")) %>
      <% end %>
    <% end %>

    <%= render(SwitchComponent.new(event: { listener: :click, action: :switch })) do |c| %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "link")) %>
      <% end %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "check-circle", svg_class: "w-5 h-6 text-green-500")) %>
      <% end %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "spinner", type: :animation)) %>
      <% end %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "star", svg_class: "w-5 h-6 text-sky-800")) %>
      <% end %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "sun", svg_class: "w-5 h-6 text-yellow-500")) %>
      <% end %>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "TabComponent")) %>
    <% tab_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(event: { listener: :click, action: :tab, id: tab_event_id, value: 0 })) %>
    <%= render(ButtonComponent.new(event: { listener: :click, action: :tab, id: tab_event_id, value: 1 })) %>
    <%= render(ButtonComponent.new(event: { listener: :click, action: :tab, id: tab_event_id, value: 2 })) %>
    <%= render(ButtonComponent.new(event: { listener: :click, action: :tab, id: tab_event_id, value: 3 })) %>
    <%= render(TabComponent.new(event: { id: tab_event_id })) do |c| %>
      <% c.with_tab do %>
        <%= render(IconComponent.new(name: "link")) %>
      <% end %>
      <% c.with_tab do %>
        <%= render(IconComponent.new(name: "check-circle", svg_class: "w-5 h-6 text-green-500")) %>
      <% end %>
      <% c.with_tab do %>
        <%= render(IconComponent.new(name: "spinner", type: :animation)) %>
      <% end %>
      <% c.with_tab do %>
        <%= render(IconComponent.new(name: "star", svg_class: "w-5 h-6 text-sky-800")) %>
      <% end %>
      <% c.with_tab do %>
        <%= render(IconComponent.new(name: "sun", svg_class: "w-5 h-6 text-yellow-500")) %>
      <% end %>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "ToastComponent")) %>
    <% toast_event_id = SecureRandom.uuid %>
    <%= render(ButtonComponent.new(label: 'Toggle Toast', event: { id: toast_event_id, action: :toggle, listener: :click })) %>
    <%= render(ToastComponent.new(event: { id: toast_event_id })) do %>
      <div>Executing JavaScript from a string is an BIG security risk.
        With eval(), malicious code can run inside your application without permission.
        With eval(), third-party code can see the scope of your application, which can lead to possible attacks.
      </div>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "ListComponent")) %>
    <%= render(ListComponent.new) do %>
      <li>Coffee</li>
      <li>Tea</li>
      <li>Milk</li>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "InputComponent")) %>
    <%= render(InputComponent.new(format_options: { date: true, delimiter: '-', datePattern: ['Y', 'm', 'd'] })) do |c| %>
      <% c.with_prepend do %>
        <%= render(IconComponent.new) %>
      <% end %>
      <% c.with_append do %>
        <%= render(IconComponent.new) %>
      <% end %>
    <% end %>
    <%= render(InputComponent.new(format_options: {     time: true,
        timePattern: ['h', 'm', 's'] })) do |c| %>
      <% c.with_prepend do %>
        <%= render(IconComponent.new(name: 'star')) %>
      <% end %>
      <% c.with_append do %>
        <%= render(IconComponent.new(name: 'moon')) %>
      <% end %>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "Input with CleaveJS")) %>
    <%= render(InputComponent.new(type: :text, format_options: {
      date: true,
      delimiter: '-',
      datePattern: ['Y', 'm', 'd']
    })) %>

    <%= render(Hr::TextComponent.new(label: "Input with FlatpickJS")) %>
    <%= render(InputComponent.new(type: :date, format_options: {
      mode: "range",
      dateFormat: "Y-m-d",
    })) %>

    <%= render(Hr::TextComponent.new(label: "Editor::EditorjsComponent")) %>
    <%= form_with do %>
      <%= render(Editor::EditorjsComponent.new(object_type: "User")) %>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "Chart::ApexComponent")) %>
    <%= render(Chart::ApexComponent.new(object_type: "User")) %>

    <%= render(Hr::TextComponent.new(label: "Calendar::TuiComponent")) %>
    <%= render(Calendar::TuiComponent.new(object_type: "User")) %>

    <%= render(Hr::TextComponent.new(label: "CarouselComponent")) %>
    <%= render(CarouselComponent.new) do %>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full object-cover" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-1.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-2.jpg" alt="">
      </div>

      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-3.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-4.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-5.jpg" alt="">
      </div>

      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-6.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-7.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-8.jpg" alt="">
      </div>

      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-9.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-10.jpg" alt="">
      </div>
      <div>
          <img class="h-full w-full" src="https://flowbite.s3.amazonaws.com/docs/gallery/masonry/image-11.jpg" alt="">
      </div>
    <% end %>

  </div>
</div>
