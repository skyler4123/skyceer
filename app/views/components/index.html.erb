<div class="w-full">
  <% if notice.present? %>
    <p class="py-2 px-3 bg-green-50 mb-5 text-green-500 font-medium rounded-lg inline-block" id="notice"><%= notice %></p>
  <% end %>

  <div class="flex justify-between items-center">
    <h1 class="font-bold text-4xl">Components</h1>
  </div>

  <div id="components" class="flex flex-col justify-center items-center min-w-full pb-4">

    <%= render(Hr::DefaultComponent.new) %>
    <%= render(BoxComponent.new) do %>
      <div class="flex flex-row">
        <%= render(ButtonComponent.new) { render(IconComponent.new(name: 'minus')) } %>
        <%= render(ToggleComponent.new) %>
      </div>
      <div>2</div>
      <div class="flex flex-row">
        <%= render(ButtonComponent.new(event_listener: :hover, toggle_type: :toggle)) do |c| %>
          <%= c.with_body { render(IconComponent.new(name: 'plus-circle')) } %>
          <% c.with_hidden do %>
            <%= render(PopoverComponent.new(label: "Open more actions", klass: "w-80", content_class: "text-white bg-black px-2 py-1 bg-opacity-75 rounded-md")) %>
          <% end %>
        <% end %>
        <%= render(ButtonComponent.new) do %>
          <%= render(IconComponent.new(name: 'paper-clip')) %>
        <% end %>
        <%= render(ButtonComponent.new) do %>
          <%= render(IconComponent.new(name: 'pencil-square')) %>
        <% end %>
        <%= render(ButtonComponent.new) do %>
          <%= render(IconComponent.new(name: 'gif')) %>
        <% end %>
        <%= render(InputComponent.new(placeholder: "Aa")) %>
        <%= render(ButtonComponent.new) do %>
          <%= render(IconComponent.new(name: 'face-smile')) %>
        <% end %>
        <%= render(ButtonComponent.new) do %>
          <%= render(IconComponent.new(name: 'hand-thumb-up')) %>
        <% end %>
      </div>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "ButtonComponent")) %>
    <%= render(ButtonComponent.new(label: "Custome Button")) do |c| %>
      <% c.with_append do %>
        <%= render(IconComponent.new(name: 'code-bracket')) %>
      <% end %>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "ButtonComponent Default")) %>
    <%= render(ButtonComponent.new) %>

    <%= render(Hr::TextComponent.new(label: "IconComponent")) %>
    <%= render(IconComponent.new) %>
    <%= render(IconComponent.new(name: 'star')) %>

    <%= render(Hr::TextComponent.new(label: "TextComponent")) %>
    <%= render(TextComponent.new) %>
    <%= render(TextComponent.new(label: "Price", language_key: :price)) %>

    <%= render(Hr::TextComponent.new(label: "AccordionComponent")) %>
    <%= render(Accordion::GroupComponent.new) do |c| %>
      <% c.with_separator do %>
        <%= render(Hr::DefaultComponent.new) %>
      <% end %>
      <% c.with_accordion do %>
        <%= render(AccordionComponent.new) %>
      <% end %>
      <% c.with_accordion do %>
        <%= render(AccordionComponent.new(position: :top)) %>
      <% end %>
      <% c.with_accordion do %>
        <%= render(AccordionComponent.new(position: :right)) %>
      <% end %>
      <% c.with_accordion do %>
        <%= render(AccordionComponent.new(position: :left)) %>
      <% end %>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "Tab::DefaultComponent")) %>
    <%= render(Tab::DefaultComponent.new) do |c| %>
      <% c.with_headers do %>
        <div>Header 1</div>
        <div>Header 2</div>
        <div>Header 3</div>
        <div>Header 4</div>
      <% end %>
      <% c.with_bodies do %>
        <div>Body 1</div>
        <div>Body 2</div>
        <div>Body 3</div>
        <div>Body 4</div>
      <% end %>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "Table::DemoComponent")) %>
    <%= render(Table::DemoComponent.new) %>

    <%= render(Hr::TextComponent.new(label: "Popover::DefaultComponent")) %>
    <%= render(ButtonComponent.new(toggle_type: :toggle, event_listener: :click)) do |c| %>
      <% c.with_hidden do %>
        <%= render(PopoverComponent.new(position: :right_center)) %>
      <% end %>
    <% end %>
    <%= render(ButtonComponent.new(toggle_type: :toggle, event_listener: :hover)) do |c| %>
      <% c.with_hidden do %>
        <%= render(PopoverComponent.new(position: :left_bottom)) %>
      <% end %>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "Modal::DefaultComponent")) %>
    <%= render(ButtonComponent.new) do |c| %>
      <% c.with_hidden do %>
        <%= render(ModalComponent.new) %>
      <% end %>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "Button::ToggleComponent")) %>
    <%= render(BoxComponent.new) do %>
      <div>ToggleComponent for this BoxComponent</div>
      <%= render(ButtonComponent.new) do |c| %>
        <% c.with_append do %>
          <%= render(ToggleComponent.new(target_controller_name: 'box-component')) %>
        <% end %>
      <% end %>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "SwitchComponent")) %>
    <%= render(SwitchComponent.new) do |c| %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "link")) %>
      <% end %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "check-circle", svg_class: "w-5 h-6 text-green-500")) %>
      <% end %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "spinner", type: :animation)) %>
      <% end %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "star", svg_class: "w-5 h-6 text-sky-800")) %>
      <% end %>
      <% c.with_switch do %>
        <%= render(IconComponent.new(name: "sun", svg_class: "w-5 h-6 text-yellow-500")) %>
      <% end %>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "ToastComponent")) %>
    <%= render(ButtonComponent.new(label: "Open Toast")) do |c| %>
      <% c.with_hidden do %>
        <%= render(ToastComponent.new) do %>
          <div>Test ToastComponent </div>
          <%= render(ToggleComponent.new) %>
        <% end %>
      <% end %>
    <% end %>
    <%= render(ButtonComponent.new(label: 'Toggle Toast', toggle_type: "toggle")) do |c| %>
      <% c.with_hidden do %>
        <%= render(ToastComponent.new) do %>
          <div>Test ToastComponent </div>
          <%= render(ToggleComponent.new(type: "toggle")) %>
        <% end %>
      <% end %>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "ListComponent")) %>
    <%= render(ListComponent.new) do %>
      <li>Coffee</li>
      <li>Tea</li>
      <li>Milk</li>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "InputComponent")) %>
    <%= render(InputComponent.new(format_options: { date: true, delimiter: '-', datePattern: ['Y', 'm', 'd'] })) do |c| %>
      <% c.with_prepend do %>
        <%= render(IconComponent.new) %>
      <% end %>
      <% c.with_append do %>
        <%= render(IconComponent.new) %>
      <% end %>
    <% end %>
    <%= render(InputComponent.new(format_options: {     time: true,
        timePattern: ['h', 'm', 's'] })) do |c| %>
      <% c.with_prepend do %>
        <%= render(IconComponent.new(name: 'star')) %>
      <% end %>
      <% c.with_append do %>
        <%= render(IconComponent.new(name: 'moon')) %>
      <% end %>
    <% end %>

    <%= render(Hr::TextComponent.new(label: "Input with CleaveJS")) %>
    <%= render(InputComponent.new(type: :text, format_options: {
      date: true,
      delimiter: '-',
      datePattern: ['Y', 'm', 'd']
    })) %>

    <%= render(Hr::TextComponent.new(label: "Input with FlatpickJS")) %>
    <%= render(InputComponent.new(type: :date, format_options: {
      mode: "range",
      dateFormat: "Y-m-d",
    })) %>

  </div>
</div>
