# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rails_mini_profiler` gem.
# Please instead update this file by running `bin/tapioca gem rails_mini_profiler`.

# Main namespace for Rails Mini Profiler
#
# source://rails_mini_profiler//lib/rails_mini_profiler/version.rb#3
module RailsMiniProfiler
  class << self
    # Authorize the current user for this request
    #
    # @param current_user [Object] the current user
    # @see User#current_user
    #
    # source://rails_mini_profiler//lib/rails_mini_profiler.rb#68
    def authorize!(current_user); end

    # Create a new configuration object
    #
    # @return [Configuration] a new configuration
    #
    # source://rails_mini_profiler//lib/rails_mini_profiler.rb#33
    def configuration; end

    # Configure Rails Mini Profiler
    #
    # You may use this to configure where and how Rails Mini Profiler stores profiling and storage information.
    #
    # @see https://github.com/hschne/rails-mini-profiler#configuration
    # @yield [configuration]
    # @yieldreturn [Configuration] a new configuration
    #
    # source://rails_mini_profiler//lib/rails_mini_profiler.rb#44
    def configure; end

    # Set the current user for this request
    #
    # @param current_user [Object] the current user
    # @see User#current_user
    #
    # source://rails_mini_profiler//lib/rails_mini_profiler.rb#77
    def current_user=(current_user); end

    # Access the current logger
    #
    # @return [Logger] the logger instance
    #
    # source://rails_mini_profiler//lib/rails_mini_profiler.rb#59
    def logger; end

    # source://railties/7.0.8/lib/rails/engine.rb#405
    def railtie_helpers_paths; end

    # source://railties/7.0.8/lib/rails/engine.rb#394
    def railtie_namespace; end

    # source://railties/7.0.8/lib/rails/engine.rb#409
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # Access storage configuration.
    #
    # @return [Storage] a new storage configuration
    #
    # source://rails_mini_profiler//lib/rails_mini_profiler.rb#52
    def storage_configuration; end

    # source://railties/7.0.8/lib/rails/engine.rb#397
    def table_name_prefix; end

    # source://railties/7.0.8/lib/rails/engine.rb#401
    def use_relative_model_naming?; end
  end
end

class RailsMiniProfiler::ApplicationController < ::ActionController::Base
  protected

  def present(model, presenter_class = T.unsafe(nil), **kwargs); end

  private

  # source://actionview/7.0.8/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def _layout_from_proc; end
  def check_current_user; end
  def not_found(error); end

  class << self
    # source://activesupport/7.0.8/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.8/lib/action_controller/metal.rb#210
    def middleware_stack; end

    # source://activesupport/7.0.8/lib/active_support/rescuable.rb#13
    def rescue_handlers; end
  end
end

module RailsMiniProfiler::ApplicationController::HelperMethods
  include ::ActionText::ContentHelper
  include ::ActionText::TagHelper
  include ::Importmap::ImportmapTagsHelper
  include ::Turbo::DriveHelper
  include ::Turbo::FramesHelper
  include ::Turbo::IncludesHelper
  include ::Turbo::StreamsHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::Turbo::Streams::ActionHelper
  include ::ActionController::Base::HelperMethods
  include ::RailsMiniProfiler::ApplicationHelper
end

module RailsMiniProfiler::ApplicationHelper
  def inline_svg(path, options = T.unsafe(nil)); end
  def present(model, presenter_class = T.unsafe(nil), **kwargs); end
end

# Wraps functionality to render an interactive badge on top of HTML responses
#
# @api private
#
# source://rails_mini_profiler//lib/rails_mini_profiler/badge.rb#9
class RailsMiniProfiler::Badge
  include ::InlineSvg::ActionView::Helpers
  include ::RailsMiniProfiler::ApplicationHelper
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor

  # @api private
  # @param request_context [RequestContext] The current request context
  # @param configuration [Configuration] The current configuration
  # @return [Badge] a new instance of Badge
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/badge.rb#16
  def initialize(request_context, configuration: T.unsafe(nil)); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options=(_arg0); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options?; end

  # Inject the badge into the response
  #
  # @api private
  # @return [ResponseWrapper] The modified response
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/badge.rb#25
  def render; end

  private

  # Render the badge template
  #
  # @api private
  # @return String The badge HTML content to be injected
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/badge.rb#59
  def badge_content; end

  # Transform the configuration position into CSS style positions
  #
  # @api private
  # @return String The badge position as CSS style
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/badge.rb#69
  def css_position; end

  # Modify the body of the original response
  #
  # @api private
  # @return String The modified body
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/badge.rb#46
  def modified_body; end

  class << self
    # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#564
    def _routes; end

    # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options; end

    # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options=(value); end

    # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options?; end
  end
end

class RailsMiniProfiler::BasePresenter < ::SimpleDelegator
  def initialize(model, view, **_kwargs); end

  def h; end
  def method_missing(method, *args, &block); end

  # source://delegate/0.3.0/delegate.rb#318
  def model; end

  private

  def respond_to_missing?(method_name, *args); end
end

# The main Rails Mini Profiler configuration object
#
# source://rails_mini_profiler//lib/rails_mini_profiler/configuration.rb#23
class RailsMiniProfiler::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/configuration.rb#35
  def initialize(**kwargs); end

  # Returns the value of attribute badge_enabled.
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/configuration.rb#26
  def badge_enabled; end

  # Sets the attribute badge_enabled
  #
  # @param value the value to set the attribute badge_enabled to.
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/configuration.rb#26
  def badge_enabled=(_arg0); end

  # @return [String] the position of the interactive HTML badge.
  # @see Badge
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/configuration.rb#26
  def badge_position; end

  # @return [String] the position of the interactive HTML badge.
  # @see Badge
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/configuration.rb#26
  def badge_position=(_arg0); end

  # @return [Boolean] if the profiler is enabled
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/configuration.rb#26
  def enabled; end

  # @return [Boolean] if the profiler is enabled
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/configuration.rb#26
  def enabled=(_arg0); end

  # @return [Boolean] if Flamegraph recording is enabled
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/configuration.rb#26
  def flamegraph_enabled; end

  # @return [Boolean] if Flamegraph recording is enabled
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/configuration.rb#26
  def flamegraph_enabled=(_arg0); end

  # @return [Float] the sample rate in samples per millisecond
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/configuration.rb#26
  def flamegraph_sample_rate; end

  # @return [Float] the sample rate in samples per millisecond
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/configuration.rb#26
  def flamegraph_sample_rate=(_arg0); end

  # @return [Logger] the current logger
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/configuration.rb#24
  def logger; end

  # Set the logger
  #
  # @param logger [Logger] The logger to be used. If set to nil, the Rails default logger is used and the log level set to fatal
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/configuration.rb#57
  def logger=(logger); end

  # Reset the configuration to default values
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/configuration.rb#41
  def reset; end

  # @return [Array<String>] a list of regex patterns for paths to skip
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/configuration.rb#26
  def skip_paths; end

  # @return [Array<String>] a list of regex patterns for paths to skip
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/configuration.rb#26
  def skip_paths=(_arg0); end

  # @return [Storage] the storage configuration
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/configuration.rb#26
  def storage; end

  # @return [Storage] the storage configuration
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/configuration.rb#26
  def storage=(_arg0); end

  # @return [Proc] a proc to identify a user based on a rack env
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/configuration.rb#26
  def user_provider; end

  # @return [Proc] a proc to identify a user based on a rack env
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/configuration.rb#26
  def user_provider=(_arg0); end
end

class RailsMiniProfiler::ControllerTracePresenter < ::RailsMiniProfiler::TracePresenter
  def label; end
  def payload; end
end

# The Rails Mini Profiler engine
#
# Injects a a custom [Middleware] into an existing Rails app to record request profiling information.
#
# source://rails_mini_profiler//lib/rails_mini_profiler/engine.rb#7
class RailsMiniProfiler::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.0.8/lib/active_support/callbacks.rb#68
    def __callbacks; end
  end
end

# source://rails_mini_profiler//lib/rails_mini_profiler/flamegraph_guard.rb#4
class RailsMiniProfiler::FlamegraphGuard
  # @return [FlamegraphGuard] a new instance of FlamegraphGuard
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/flamegraph_guard.rb#5
  def initialize(request_context, configuration: T.unsafe(nil)); end

  # source://rails_mini_profiler//lib/rails_mini_profiler/flamegraph_guard.rb#11
  def record(&block); end

  private

  # @return [Boolean]
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/flamegraph_guard.rb#40
  def config_enabled?; end

  # @return [Boolean]
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/flamegraph_guard.rb#36
  def enabled?; end
end

class RailsMiniProfiler::FlamegraphsController < ::RailsMiniProfiler::ApplicationController
  def show; end

  private

  # source://actionview/7.0.8/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def _layout_from_proc; end
  def configuration; end
  def set_flamegraph; end

  class << self
    # source://activesupport/7.0.8/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionview/7.0.8/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.8/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionpack/7.0.8/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

# Encapsulates guard conditions on whether or not to run certain parts of the profiler.
#
# source://rails_mini_profiler//lib/rails_mini_profiler/guard.rb#5
class RailsMiniProfiler::Guard
  # @param request_context [RequestContext] the current request context
  # @param configuration [Configuration] the current configuration
  # @return [Guard] a new instance of Guard
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/guard.rb#8
  def initialize(request_context, configuration: T.unsafe(nil)); end

  # Whether or not to profile
  #
  # Profiling is disabled the profiler has been flat out disabled in the configuration or if the current request path
  # matches on of the ignored paths.
  #
  # @return [Boolean] false if no profiling should be done
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/guard.rb#20
  def profile?; end

  private

  # Is the profiler enabled?
  #
  # Takes into account the current request env to decide if the profiler is enabled.
  #
  # @return [Boolean] false if the profiler is disabled
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/guard.rb#50
  def enabled?; end

  # Is the path of the current request an ignored one?
  #
  # @return [Boolean] true if the path is ignored. Per default, paths going to the engine itself are ignored, as are
  #   asset requests, and the paths the user has configured.
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/guard.rb#34
  def ignored_path?; end
end

class RailsMiniProfiler::InstantiationTracePresenter < ::RailsMiniProfiler::TracePresenter
  def description; end
  def label; end
end

# Construct a new custom logger to log from within the engine
#
# source://rails_mini_profiler//lib/rails_mini_profiler/logger.rb#5
module RailsMiniProfiler::Logger
  class << self
    # Extends a logger with additional formatting
    #
    # @return [Logger] a customized logger
    #
    # source://rails_mini_profiler//lib/rails_mini_profiler/logger.rb#9
    def new(logger); end
  end
end

# Custom formatter to add a RailsMiniProfiler tag to log messages
#
# source://rails_mini_profiler//lib/rails_mini_profiler/logger.rb#19
module RailsMiniProfiler::Logger::Formatter
  # source://rails_mini_profiler//lib/rails_mini_profiler/logger.rb#20
  def call(severity, timestamp, progname, msg); end
end

# source://rails_mini_profiler//lib/rails_mini_profiler/middleware.rb#4
class RailsMiniProfiler::Middleware
  # @return [Middleware] a new instance of Middleware
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/middleware.rb#5
  def initialize(app); end

  # source://rails_mini_profiler//lib/rails_mini_profiler/middleware.rb#11
  def call(env); end

  # source://rails_mini_profiler//lib/rails_mini_profiler/middleware.rb#25
  def traces; end

  # source://rails_mini_profiler//lib/rails_mini_profiler/middleware.rb#29
  def traces=(traces); end

  # source://rails_mini_profiler//lib/rails_mini_profiler/middleware.rb#33
  def track_trace(event); end

  private

  # source://rails_mini_profiler//lib/rails_mini_profiler/middleware.rb#42
  def complete!(request_context); end

  # source://rails_mini_profiler//lib/rails_mini_profiler/middleware.rb#59
  def profile(request_context); end

  # source://rails_mini_profiler//lib/rails_mini_profiler/middleware.rb#51
  def render_response(request_context); end

  # source://rails_mini_profiler//lib/rails_mini_profiler/middleware.rb#66
  def with_tracing(request_context); end
end

# Thin wrappers around request/response classes
#
# @api private
#
# source://rails_mini_profiler//lib/rails_mini_profiler/models/base_model.rb#7
module RailsMiniProfiler::Models; end

# A pseudo model to be used to wrap profiling information. We can't use regular models, as their connecting
# to the database results in problems when profiling.
#
# @api private
#
# source://rails_mini_profiler//lib/rails_mini_profiler/models/base_model.rb#10
class RailsMiniProfiler::Models::BaseModel
  include ::ActiveModel::Validations
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Conversion
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::API
  include ::ActiveModel::Model
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods

  # @api private
  # @return [BaseModel] a new instance of BaseModel
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/models/base_model.rb#13
  def initialize(*_args, **attributes); end

  # source://activesupport/7.0.8/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.8/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.8/lib/active_support/callbacks.rb#928
  def _run_validate_callbacks(&block); end

  # source://activesupport/7.0.8/lib/active_support/callbacks.rb#940
  def _validate_callbacks; end

  # source://activemodel/7.0.8/lib/active_model/validations.rb#52
  def _validators; end

  # source://activemodel/7.0.8/lib/active_model/validations.rb#52
  def _validators?; end

  # source://activemodel/7.0.8/lib/active_model/naming.rb#244
  def model_name(*_arg0, **_arg1, &_arg2); end

  # @api private
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/models/base_model.rb#17
  def to_h; end

  # source://activemodel/7.0.8/lib/active_model/validations.rb#48
  def validation_context; end

  private

  # source://activemodel/7.0.8/lib/active_model/validations.rb#48
  def validation_context=(_arg0); end

  class << self
    # source://activesupport/7.0.8/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.8/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.8/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.8/lib/active_support/callbacks.rb#932
    def _validate_callbacks; end

    # source://activesupport/7.0.8/lib/active_support/callbacks.rb#936
    def _validate_callbacks=(value); end

    # source://activemodel/7.0.8/lib/active_model/validations.rb#52
    def _validators; end

    # source://activemodel/7.0.8/lib/active_model/validations.rb#52
    def _validators=(value); end

    # source://activemodel/7.0.8/lib/active_model/validations.rb#52
    def _validators?; end
  end
end

# A simplified representation of a trace.
#
# Is transformed into [RailsMiniProfiler::Trace] when recording has finished.
#
# @api private
# @see https://guides.rubyonrails.org/active_support_instrumentation.html
#
# source://rails_mini_profiler//lib/rails_mini_profiler/models/trace.rb#33
class RailsMiniProfiler::Models::Trace < ::RailsMiniProfiler::Models::BaseModel
  # @api private
  # @return [Integer] the number of alloactions
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/models/trace.rb#34
  def allocations; end

  # @api private
  # @return [Integer] the number of alloactions
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/models/trace.rb#34
  def allocations=(_arg0); end

  # @api private
  # @return [String] the line where this trace was recorded
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/models/trace.rb#34
  def backtrace; end

  # @api private
  # @return [String] the line where this trace was recorded
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/models/trace.rb#34
  def backtrace=(_arg0); end

  # @api private
  # @return [DateTime] the creation date
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/models/trace.rb#34
  def created_at; end

  # @api private
  # @return [DateTime] the creation date
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/models/trace.rb#34
  def created_at=(_arg0); end

  # @api private
  # @return [Integer] the trace duration
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/models/trace.rb#34
  def duration; end

  # @api private
  # @return [Integer] the trace duration
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/models/trace.rb#34
  def duration=(_arg0); end

  # @api private
  # @return [Integer] the trace finish as microsecond timestamp
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/models/trace.rb#34
  def finish; end

  # @api private
  # @return [Integer] the trace finish as microsecond timestamp
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/models/trace.rb#34
  def finish=(_arg0); end

  # @api private
  # @return [Integer] the trace ID
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/models/trace.rb#34
  def id; end

  # @api private
  # @return [Integer] the trace ID
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/models/trace.rb#34
  def id=(_arg0); end

  # @api private
  # @return [Integer] the trace type.
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/models/trace.rb#34
  def name; end

  # @api private
  # @return [Integer] the trace type.
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/models/trace.rb#34
  def name=(_arg0); end

  # @api private
  # @return [Hash] a subset of trace data
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/models/trace.rb#34
  def payload; end

  # @api private
  # @return [Hash] a subset of trace data
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/models/trace.rb#34
  def payload=(_arg0); end

  # @api private
  # @return [Integer] the trace start as microsecond timestamp
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/models/trace.rb#34
  def start; end

  # @api private
  # @return [Integer] the trace start as microsecond timestamp
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/models/trace.rb#34
  def start=(_arg0); end

  # @api private
  # @return [DateTime] the last updated date
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/models/trace.rb#34
  def updated_at; end

  # @api private
  # @return [DateTime] the last updated date
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/models/trace.rb#34
  def updated_at=(_arg0); end

  class << self
    # source://activemodel/7.0.8/lib/active_model/validations.rb#52
    def _validators; end
  end
end

class RailsMiniProfiler::ProfiledRequestPresenter < ::RailsMiniProfiler::BasePresenter
  def allocations; end
  def created_at; end
  def duration; end
  def flamegraph_button; end
  def flamegraph_icon; end
  def request_name; end
end

class RailsMiniProfiler::ProfiledRequestsController < ::RailsMiniProfiler::ApplicationController
  def destroy; end
  def destroy_all; end
  def index; end
  def show; end

  private

  # source://actionview/7.0.8/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def _layout_from_proc; end
  def configuration; end
  def payload_column; end
  def set_profiled_request; end
  def user_id; end

  class << self
    # source://activesupport/7.0.8/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.8/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

module RailsMiniProfiler::ProfiledRequestsController::HelperMethods
  include ::ActionText::ContentHelper
  include ::ActionText::TagHelper
  include ::Importmap::ImportmapTagsHelper
  include ::Turbo::DriveHelper
  include ::Turbo::FramesHelper
  include ::Turbo::IncludesHelper
  include ::Turbo::StreamsHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::Turbo::Streams::ActionHelper
  include ::ActionController::Base::HelperMethods
  include ::RailsMiniProfiler::ApplicationHelper
  include ::RailsMiniProfiler::ApplicationController::HelperMethods
  include ::RailsMiniProfiler::ProfiledRequestsHelper
end

module RailsMiniProfiler::ProfiledRequestsHelper
  include ::RailsMiniProfiler::ApplicationHelper

  def formatted_allocations(allocations); end
  def formatted_duration(duration); end
end

# Renders a redirect response if the user should be redirected from the original request
#
# source://rails_mini_profiler//lib/rails_mini_profiler/redirect.rb#5
class RailsMiniProfiler::Redirect
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor

  # @param request_context [RequestContext] the current request context
  # @return [Redirect] a new instance of Redirect
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/redirect.rb#9
  def initialize(request_context); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options=(_arg0); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options?; end

  # Renders a redirect to a specific resource under certain conditions
  #
  # When the user requests a Flamegraph using a parameter for a specific request, they are being served a redirect.
  #
  # @return [Boolean] false if no redirect happens
  # @return [Array] response with status 302 and the new location to redirect to
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/redirect.rb#20
  def render; end

  private

  # source://rails_mini_profiler//lib/rails_mini_profiler/redirect.rb#29
  def redirect_to(location); end

  class << self
    # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#564
    def _routes; end

    # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options; end

    # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options=(value); end

    # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options?; end
  end
end

class RailsMiniProfiler::RenderPartialTracePresenter < ::RailsMiniProfiler::TracePresenter
  def label; end
end

class RailsMiniProfiler::RenderTemplateTracePresenter < ::RailsMiniProfiler::TracePresenter
  def description; end
  def label; end
end

# A working context for the duration of a request, as it runs through Rails Mini Profiler's middleware
#
# Contains all information that is being gathered while profiling is active. At the end of the request processing,
# the request context is converted into a models which are then stored in the host apps database.
#
# source://rails_mini_profiler//lib/rails_mini_profiler/request_context.rb#19
class RailsMiniProfiler::RequestContext
  # @param request [RequestWrapper] the request as sent to the application
  # @return [RequestContext] a new instance of RequestContext
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/request_context.rb#25
  def initialize(request); end

  # If a user is currently authorized
  #
  # @return [Boolean] true if the user is authorized
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/request_context.rb#35
  def authorized?; end

  # @return [Boolean]
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/request_context.rb#61
  def complete?; end

  # Completes profiling, setting all data and preparing for saving it.
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/request_context.rb#40
  def complete_profiling!; end

  # @return [Flamegraph] a Flamegraph, if recorded
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/request_context.rb#22
  def flamegraph; end

  # @return [Flamegraph] a Flamegraph, if recorded
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/request_context.rb#22
  def flamegraph=(_arg0); end

  # @return [ProfiledRequest] the profiling data as gathered during profiling
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/request_context.rb#22
  def profiled_request; end

  # @return [ProfiledRequest] the profiling data as gathered during profiling
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/request_context.rb#22
  def profiled_request=(_arg0); end

  # @return [RequestWrapper] the request as sent to the application
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/request_context.rb#20
  def request; end

  # @return [ResponseWrapper] the response as rendered by the application
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/request_context.rb#22
  def response; end

  # @return [ResponseWrapper] the response as rendered by the application
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/request_context.rb#22
  def response=(_arg0); end

  # Save profiling data in the database.
  #
  # This will store the profiled request, as well as any attached traces and Flamgraph.
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/request_context.rb#52
  def save_results!; end

  # @return [Boolean]
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/request_context.rb#65
  def saved?; end

  # @return [Array<Models::Trace>] trace wrappers gathered during profiling
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/request_context.rb#22
  def traces; end

  # @return [Array<Models::Trace>] trace wrappers gathered during profiling
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/request_context.rb#22
  def traces=(_arg0); end

  private

  # source://rails_mini_profiler//lib/rails_mini_profiler/request_context.rb#71
  def insert_traces; end
end

# source://rails_mini_profiler//lib/rails_mini_profiler/request_wrapper.rb#4
class RailsMiniProfiler::RequestWrapper
  # @return [RequestWrapper] a new instance of RequestWrapper
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/request_wrapper.rb#11
  def initialize(env = T.unsafe(nil)); end

  # Returns the value of attribute body.
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/request_wrapper.rb#5
  def body; end

  # Returns the value of attribute env.
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/request_wrapper.rb#5
  def env; end

  # source://rails_mini_profiler//lib/rails_mini_profiler/request_wrapper.rb#19
  def headers; end

  # Returns the value of attribute method.
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/request_wrapper.rb#5
  def method; end

  # Returns the value of attribute path.
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/request_wrapper.rb#5
  def path; end

  # Returns the value of attribute query_string.
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/request_wrapper.rb#5
  def query_string; end

  private

  # source://rails_mini_profiler//lib/rails_mini_profiler/request_wrapper.rb#25
  def read_body; end
end

# source://rails_mini_profiler//lib/rails_mini_profiler/response_wrapper.rb#4
class RailsMiniProfiler::ResponseWrapper
  # @return [ResponseWrapper] a new instance of ResponseWrapper
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/response_wrapper.rb#9
  def initialize(status, headers, response); end

  # source://rails_mini_profiler//lib/rails_mini_profiler/response_wrapper.rb#14
  def body; end

  # source://rails_mini_profiler//lib/rails_mini_profiler/response_wrapper.rb#7
  def headers(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/response_wrapper.rb#24
  def json?; end

  # source://rails_mini_profiler//lib/rails_mini_profiler/response_wrapper.rb#20
  def media_type; end

  # Returns the value of attribute rack_response.
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/response_wrapper.rb#5
  def rack_response; end

  # Returns the value of attribute response.
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/response_wrapper.rb#5
  def response; end

  # source://rails_mini_profiler//lib/rails_mini_profiler/response_wrapper.rb#7
  def status(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/response_wrapper.rb#28
  def xml?; end
end

class RailsMiniProfiler::RmpTracePresenter < ::RailsMiniProfiler::TracePresenter
  def label; end
end

class RailsMiniProfiler::SequelTracePresenter < ::RailsMiniProfiler::TracePresenter
  def description; end
  def label; end
  def payload; end

  private

  def binding_content; end
  def schema?; end
  def simple_binds; end
  def sql_description; end
  def transaction?; end
  def transaction_description; end
end

# Configure how profiling data is stored within your Rails app.
#
# source://rails_mini_profiler//lib/rails_mini_profiler/storage.rb#14
class RailsMiniProfiler::Storage
  # @return [Storage] a new instance of Storage
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/storage.rb#34
  def initialize(**kwargs); end

  # @return [Symbol] which database to connect to
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/storage.rb#32
  def database; end

  # @return [Symbol] which database to connect to
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/storage.rb#32
  def database=(_arg0); end

  # Reset the configuration to default values
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/storage.rb#40
  def defaults!; end

  # @return [Symbol] where to store flamegraphs
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/storage.rb#32
  def flamegraphs_table; end

  # @return [Symbol] where to store flamegraphs
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/storage.rb#32
  def flamegraphs_table=(_arg0); end

  # @return [Symbol] where to store profiled requests
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/storage.rb#32
  def profiled_requests_table; end

  # @return [Symbol] where to store profiled requests
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/storage.rb#32
  def profiled_requests_table=(_arg0); end

  # @return [Symbol] where to store traces
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/storage.rb#32
  def traces_table; end

  # @return [Symbol] where to store traces
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/storage.rb#32
  def traces_table=(_arg0); end

  class << self
    # Construct a new configuration instance
    #
    # @return [Storage] a new storage configuration
    #
    # source://rails_mini_profiler//lib/rails_mini_profiler/storage.rb#19
    def configuration; end

    # Configure how profiling data is stored
    #
    # @yield [configuration]
    # @yieldreturn [Storage] a new storage configuration object
    #
    # source://rails_mini_profiler//lib/rails_mini_profiler/storage.rb#26
    def configure; end
  end
end

class RailsMiniProfiler::TracePresenter < ::RailsMiniProfiler::BasePresenter
  def initialize(trace, view, profiled_request:); end

  def allocations; end
  def allocations_percent; end
  def backtrace; end
  def description; end
  def duration; end
  def duration_percent; end
  def from_start; end
  def from_start_percent; end
  def label; end
  def payload; end
  def type; end
end

# source://rails_mini_profiler//lib/rails_mini_profiler/tracers.rb#4
class RailsMiniProfiler::Tracers
  class << self
    # source://rails_mini_profiler//lib/rails_mini_profiler/tracers.rb#21
    def build_trace(event); end

    # source://rails_mini_profiler//lib/rails_mini_profiler/tracers.rb#15
    def setup!(&callback); end

    private

    # source://rails_mini_profiler//lib/rails_mini_profiler/tracers.rb#45
    def format_payload(event); end

    # source://rails_mini_profiler//lib/rails_mini_profiler/tracers.rb#37
    def subscribe(*subscriptions, &callback); end

    # source://rails_mini_profiler//lib/rails_mini_profiler/tracers.rb#69
    def transform_binds(binds, type_casted_binds); end

    # source://rails_mini_profiler//lib/rails_mini_profiler/tracers.rb#77
    def transform_controller_event(event); end

    # source://rails_mini_profiler//lib/rails_mini_profiler/tracers.rb#58
    def transform_sql_event(event); end
  end
end

# source://rails_mini_profiler//lib/rails_mini_profiler/tracers.rb#5
RailsMiniProfiler::Tracers::DEFAULT_SUBSCRIPTIONS = T.let(T.unsafe(nil), Array)

# source://rails_mini_profiler//lib/rails_mini_profiler/user.rb#4
class RailsMiniProfiler::User
  # @return [User] a new instance of User
  #
  # source://rails_mini_profiler//lib/rails_mini_profiler/user.rb#23
  def initialize(current_user, env); end

  # source://rails_mini_profiler//lib/rails_mini_profiler/user.rb#28
  def current_user; end

  # source://rails_mini_profiler//lib/rails_mini_profiler/user.rb#32
  def find_current_user; end

  class << self
    # source://rails_mini_profiler//lib/rails_mini_profiler/user.rb#14
    def authorize(user); end

    # source://rails_mini_profiler//lib/rails_mini_profiler/user.rb#6
    def current_user; end

    # source://rails_mini_profiler//lib/rails_mini_profiler/user.rb#18
    def current_user=(user); end

    # source://rails_mini_profiler//lib/rails_mini_profiler/user.rb#10
    def get(env); end
  end
end

# This needs to be double quoted for release-please
#
# See https://github.com/googleapis/release-please/issues/1018
#
# source://rails_mini_profiler//lib/rails_mini_profiler/version.rb#7
RailsMiniProfiler::VERSION = T.let(T.unsafe(nil), String)
